alias vim=nvim
# ruby,rails
alias b="bundle"
alias be="bundle exec"
alias bespec="bundle exec rspec"
alias betest="bundle exec rake test"
alias railss="bundle exec rails s -b 0.0.0.0"
alias railsc="bundle exec rails c"

alias ru="ruby"
alias t="terraform"

# docker
alias d="docker"
alias dcom="docker-compose"
alias dcomp="docker-compose -f docker-compose.yml -f docker-compose.prod.yml"
alias dcomtest="docker-compose run --rm app test"

# go
alias gohome="cd $GOPATH"

bindkey '^p' up-line-or-beginning-search

function dcombe() {
  docker-compose exec app bundle exec $@
}

function dcomexec() {
  docker-compose exec app $@
}

function dcomsh() {
  if [ "$1" = "" ];then
    docker-compose exec app sh
  else
    docker-compose exec $1 sh
  fi
}

function dcombash() {
  if [ "$1" = "" ];then
    docker-compose exec app bash
  else
    docker-compose exec $1 bash
  fi
}

# python
alias p="python"

# git
alias g='git'
alias gca='git commit --amend -C HEAD'
alias gs='git status'
alias gb='git branch'
alias gd='git diff'
alias gdt='git difftool'
alias gf='git fetch'
alias gg='git grep -i'
alias gcd='ghq-peco'
alias hcd='history-cd-peco'
alias gpo='git fetch ; git pull origin'

function gpeco() {
  git checkout $(git branch | peco)
}

function manifest-dir-peco() {
  ${MANIFEST_DIR:-"$HOME/src/github.com/FiNCDeveloper/finc_infra/k8s"}
  cd $(ls -1 $MANIFEST_DIR | fzf --ansi --query "$1")
}

function ghq-peco() {
  cd $(ghq list -p | peco --query "$1")
}

function history-cd-peco() {
  cd $(history | grep cd | awk '{ print $3 }' | sort | uniq | peco --query "$1")
}

# OSTYPE settings ls, pbcopy...
case "${OSTYPE}" in
darwin*)
  alias ls='ls -G'
  alias ll='ls -la'
  alias la="ll"
  alias sed='gsed'
  ;;
linux*)
  alias ls='ls --color'
  alias ll='ls -la --color'
  alias la='ls -la --color'
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'
  alias open='xdg-open'
  ;;
esac

#cd
alias S='cd ~/src'

alias reload_bashrc='. ~/.bashrc'

# AWS
alias a='aws'
alias amazon='aws'

#GCP & Kuberentes
alias c='gcloud'
alias gc='gcloud'

alias k='kubectl'
alias kapi='kubectl api-resources'
alias kb='kustomize build'
alias kc='kubectx'
alias kd='kubectl describe'
alias kg='kubectl get'
alias kgyaml='kubectl get -oyaml'
alias kns='kubens'
alias ct='conftest'
alias ctt='conftest test'

# telepresence
alias tele=telepresence
alias tele_rails='telepresence --new-deployment tele-rails --expose 3000:3000 --run bundle exec rails s -b 0.0.0.0'

# istio
alias i="istioctl"
alias ig="istioctl get"
alias kgv="kubectl get virtualservice"
alias kgd="kubectl get desitinationrule"
alias kgg="kubectl get gateway"

alias kdv="kubectl describe VirtualService"
alias kdd="kubectl describe DestinationRule"
alias kdg="kubectl describe gateway"
alias kcd="manifest-dir-peco"

alias sw-context='switch-k8s-context'
alias sw-ns='switch-k8s-namespace'
alias sw-kubeconfig='switch-k8s-config'

alias h='hub'
alias hb='hub browse'
alias v='vim'
alias gw='ghkw'
alias gwr='ghkw --language=ruby'

function gssh() {
  $(gcloud compute instances list | peco | awk '{print "gcloud compute ssh --zone " $2 " " $1}')
}

function switch-k8s-namespace() {
  if [ -z $1 ]; then
    kubens `kubens | peco`
    return 0
  fi
  kubens $1
}

function switch-k8s-context() {
  if [ -z $1 ]; then
    kubectx `kubectx | peco`
    return 0
  fi
  kubectx $1
}

function switch-k8s-config() {
  config=$(ls -1 ~/.kube/ | peco --prompt "Switch KUBECONFIG. Current: $KUBECONFIG >")
  if [ ! -z "$config" ]; then
    export KUBECONFIG="$HOME/.kube/$config"
  fi

}

# misc
alias ghost='gh-ost'

# elixir
alias e='elixir'

function review() {
  branch=$1
  if [[ -z $REVIEW_INTEGRATION_BRANCH ]]
  then
    REVIEW_INTEGRATION_BRANCH="origin/master"
  fi

  git checkout -B code-review
  git remote update
  git reset --hard ${REVIEW_INTEGRATION_BRANCH}

  git merge $branch

  echo "Reviewing branch $branch"
}

function end-review() {
  if [[ -z $REVIEW_INTEGRATION_BRANCH ]]
  then
    REVIEW_INTEGRATION_BRANCH="origin/master"
  fi
  if [[ -z $REVIEW_LOCAL_BRANCH ]]
  then
    REVIEW_LOCAL_BRANCH="master"
  fi

  git remote update
  git checkout -B code-review
  git reset --hard ${REVIEW_INTEGRATION_BRANCH}
  git checkout -B ${REVIEW_LOCAL_BRANCH}
  git reset --hard ${REVIEW_INTEGRATION_BRANCH}
}

function pdc-pid() {
  docker ps | peco | awk '{print $1}'
}

function pdc-logs() {
  target=`pdc-pid`
  docker logs ${target}
}

# Kubernetes
function pk8-pods() {
  kubectl get pod | peco | awk '{print $1}'
}

function pk8-logs() {
  target=`pk8-pods`

  if [ "$1" = "-f" ];then
    kubectl logs $1 ${target} $2
  else
    kubectl logs ${target} $1
  fi
}

function k8_rollout_history() {
  if [ -z "$1" ];then
    deployment=$(kubectl get deployment | peco | awk "{print \$1}")
  else
    deployment=$1
  fi

  if [ -z "$2" ];then
    rev=$(kubectl rollout history deployment $deployment | peco | awk "{print \$1}")
  else
    rev=$2
  fi

  kubectl rollout history deployment $deployment --revision $rev
}

function k8_rollout_latest() {
  if [ -z "$1" ];then
    deployment=$(kubectl get deployment | peco | awk "{print \$1}")
  else
    deployment=$1 || return 1
  fi

  latest=$(kubectl rollout history deployment $deployment | tail -n2 | head -n1 | awk "{print \$1}")

  echo "kubectl rollout history deployment $deployment --revision $latest"
  kubectl rollout history deployment $deployment --revision $latest
}

function k8watch() {
  watch -n 1 kubectl get $1
}

function k8s-dig {
  if [ -z $1 ]; then
    echo 'Error: require host e.g. mysvc.default.svc.cluster.local'
  fi
  kubectl run dig-pod --image=centos:6 --restart=Never -i --rm -- dig $@
}

function k8s-run-debug-container() {
  kubectl run debug --image=buildpack-deps --command -- /usr/bin/tail -f /dev/null
}

function k8s-run-mysql-container() {
  kubectl run --expose --port 3306 mysql --image=mysql  \
    --env="MYSQL_ROOT_PASSWORD=root"
}


# Google Cloud Platform
function switch-gcp-project() {
  proj=`gcloud projects list | peco | awk '{print $1}'`
  gcloud config set project ${proj}
}

# ssh
function historyssh() {
  history | grep " ssh " | awk '!colname[$3]++{print($2,$3)}' | sort | uniq
}

function latest-ssh() {
  `historyssh | awk 'END {print}'` $@
}

function p-ssh() {
  `historyssh | peco` $@
}


function get-env-dockertag() {
  if [ -z "$DOCKER_BASE" ];then
    echo "DOCKER_BASE enviroment not defined." >&2
    exit 1
  fi

  tag=${TAG:-'latest'}
  tag=${1:-$tag}
  echo ${DOCKER_BASE}:${tag}
}

function docker-run-default() {
  tag=`get-env-dockertag $@`
  docker run -it $tag /bin/sh
}

function docker-push-default() {
  tag=`get-env-dockertag $@`
  docker push -t $tag
}

function gcp-docker-push-default() {
  tag=`get-env-dockertag $@`
  echo "gcloud docker push ${tag}"
  gcloud docker -- push $tag
}
alias dp='docker-push-default'
alias dpg='gcp-docker-push-default'

function docker-build-default() {
  if [ -z "$DOCKER_BASE" ];then
    echo "DOCKER_BASE enviroment not defined."
  fi

  tag=${TAG:-'latest'}
  tag=${1:-$tag}

  echo "Docker Build ${DOCKER_BASE}:${tag}"
  docker build -t ${DOCKER_BASE}:${tag} .
}
alias db='docker-build-default'

function docker-print-tag() {
  tag=${TAG:-'latest'}
  echo "${DOCKER_BASE}:${tag}"
}
alias dpt='docker-print-tag'

function ggedit() {
  vim -p `git grep -l $1 | peco`
}

# slideshareにPDFをうｐした時に日本語が表示されない時に使うやつ
function convert_slide_share() {
  LANG=C LC_ALL=C sed -i '' s'|/Registry (Adobe) /Ordering (Japan1) /Supplement [0-9]|/Registry(Adobe) /Ordering(Identity) /Supplement 0|g' $1
}


function open_localhost() {
  open "http://localhost:${1:-3000}"
}
alias op=open
alias opl=open_localhost
alias openl=open_localhost

function print_known_hosts (){
  if [ -f $HOME/.ssh/known_hosts ]; then
    cat ~/.ssh/known_hosts | tr ',' ' ' | cut -d' ' -f1
  fi
}
_cache_hosts=($( print_known_hosts ))

alias rails-ctags='ctags --langmap=RUBY:.rb --exclude="*.js"  --exclude=".git*" -R .'

function encrypt-file-for-self() {
  if [ -f $1 ]; then
    gpg --recipient sho20100@gmail.com --encrypt $1
  else
    echo 'target file not exists'
  fi
}

function decrypt-file-for-self() {
  gpg --decrypt $1
}

function sw-production() {
  export KUBECONFIG="$HOME/.kube/production"
}

function sw-staging() {
  export KUBECONFIG="$HOME/.kube/staging"
}

function sw-local() {
  export KUBECONFIG="$HOME/.kube/local"
}

