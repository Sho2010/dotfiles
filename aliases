alias b="bundle"
alias be="bundle exec"
alias bespec="bundle exec rspec"
alias betest="bundle exec rake test"

alias ru="ruby"
alias t="thor"
alias d="docker"
alias dcom="docker-compose"

# git
alias g='git'
alias gs='git status'
alias gb='git branch'
alias gd='git diff'
alias gdt='git difftool'
alias gf='git fetch'

# ls
case "${OSTYPE}" in
darwin*)
  alias ls='ls -G'
  alias ll='ls -la'
  alias la="ll"
  ;;
linux*)
  alias ls='ls --color'
  alias ll='ls -l --color'
  alias la='ls -la --color'
  ;;
esac

# ruby,rails
alias be='bundle exec'
alias bespec='bundle exec spec'

#cd
alias src='cd ~/src'

alias reload_bashrc='. ~/.bashrc'

#GCP & Kuberentes
alias k8s=kubectl

function review() {
  branch=$1
  if [[ -z $REVIEW_INTEGRATION_BRANCH ]]
  then
    REVIEW_INTEGRATION_BRANCH="origin/master"
  fi
 
  git checkout -B code-review
  git remote update
  git reset --hard ${REVIEW_INTEGRATION_BRANCH}
 
  git merge $branch
 
  echo "Reviewing branch $branch"
}
 
function end-review() {
  if [[ -z $REVIEW_INTEGRATION_BRANCH ]]
  then
    REVIEW_INTEGRATION_BRANCH="origin/master"
  fi
  if [[ -z $REVIEW_LOCAL_BRANCH ]]
  then
    REVIEW_LOCAL_BRANCH="master"
  fi
 
  git remote update
  git checkout -B code-review
  git reset --hard ${REVIEW_INTEGRATION_BRANCH}
  git checkout -B ${REVIEW_LOCAL_BRANCH}
  git reset --hard ${REVIEW_INTEGRATION_BRANCH}
}

function pdc-pid() {
  docker ps | peco | awk '{print $1}'
}

function pdc-logs() {
  target=`pdc-pid`
  docker logs ${target}
}

# Kubernetes
function pk8-pods() {
  kubectl get pod | peco | awk '{print $1}'
}

function pk8-logs() {
  target=`pk8-pods`

  if [ "$1" = "-f" ];then
    kubectl logs $1 ${target} $2
  else
    kubectl logs ${target} $1
  fi
}

function pk8-ch-cluster() {
  gcloud container clusters list | peco | awk '{print "gcloud container clusters get-credentials $0 --zone $1"}'
}

# Google Cloud Platform
function pgcp-ch-proj() {
  proj=`gcloud projects list | peco | awk '{print $1}'`
  gcloud config set project ${proj}
}

# ssh
function historyssh() {
  history | grep " ssh " | awk '!colname[$3]++{print($2,$3)}' | sort | uniq
}

function latest-ssh() {
  `historyssh | awk 'END {print}'` $@
}

function p-ssh() {
  `historyssh | peco` $@
}

function docker-build-default() {
  if [ -z "$DOCKER_TAG" ];then
    echo "DOCKER_TAG enviroment  not defined."
  else
    docker build -t ${DOCKER_TAG} .
  fi
}
alias db='docker-build-default'

function pexec() {
  `ls | peco`
}

function peco-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(\history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
zle -N peco-history
bindkey '^r' peco-history

function print_known_hosts (){
  if [ -f $HOME/.ssh/known_hosts ]; then
    cat ~/.ssh/known_hosts | tr ',' ' ' | cut -d' ' -f1
  fi
}
_cache_hosts=($( print_known_hosts ))

